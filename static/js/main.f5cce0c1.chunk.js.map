{"version":3,"sources":["components/Nav.js","components/SearchArea.js","components/Book.js","components/BookList.js","components/App.js","serviceWorker.js","index.js"],"names":["Nav","react_default","a","createElement","className","href","SearchArea","props","action","onSubmit","loadBooks","placeholder","type","onChange","handleChange","class","name","Book","image","src","alt","title","thumbnail","description","BookList","books","map","book","i","components_Book","key","volumeInfo","imageLinks","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","_this$state","state","searchWord","per","page","fetch","concat","then","data","json","console","log","setState","toConsumableArray","items","loadMoreBooks","loadingState","setTimeout","_this$state2","target","value","_this2","refs","iScroll","addEventListener","scrollTop","clientHeight","scrollHeight","ref","style","height","overflow","components_Nav","components_SearchArea","components_BookList","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5cce0c1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Nav = () => {\r\n    return(\r\n        <nav>\r\n            <div className=\"nav-wrapper container\">\r\n                <a href=\"*\" className=\"brand-logo\">Book finder</a>\r\n            </div>\r\n        </nav>\r\n        )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\nconst SearchArea = (props) =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <section className=\"col s4 offset-s4\">\r\n                    <form action=\"\" onSubmit={props.loadBooks}>\r\n                        <div className=\"input-field\">\r\n                            <input placeholder=\"Search book\" type=\"text\" onChange={props.handleChange}/>\r\n                        </div>\r\n                        <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Search</button>\r\n                    </form>\r\n                </section>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchArea;","import React from 'react';\r\n\r\nconst Book = (props) => {\r\n    return(\r\n            <div className=\"col s12 m6 l3\">\r\n                <div className=\"z-depth-2\">\r\n                    <div className=\"card large hoverable\">\r\n                        <div className=\"card-image \">\r\n                        {\r\n                             props.image == null ? <img src={`http://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`} alt={props.title}/> : <img className=\"responsive-img\" src={props.image.thumbnail} alt={props.title}/>\r\n\r\n                        }\r\n                        </div>\r\n                        <div className=\"card-content\">\r\n                            <h6 className=\"card-title\">{props.title}</h6>\r\n                            <p className=\"truncate\">{props.description}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\nexport default Book;","import React from 'react';\r\nimport Book from './Book'\r\n\r\nconst BookList = (props) => {\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12\">\r\n                    {\r\n                        props.books.map((book, i) => {\r\n                            return(\r\n                                <Book key={i}\r\n                                      image={book.volumeInfo.imageLinks}\r\n                                      title={book.volumeInfo.title}\r\n                                      description={book.volumeInfo.description}\r\n                                />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default BookList;","import React, { Component } from 'react';\nimport '../App.css';\nimport Nav from './Nav';\nimport SearchArea from './SearchArea';\nimport BookList from './BookList';\n\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n        this.state={\n            books: [],\n            searchWord: '',\n            per: 6,\n            page: 0,\n            loadingState: false\n        }\n    }\n\n    componentDidMount() {\n        this.refs.iScroll.addEventListener(\"scroll\", () => {\n            if (this.refs.iScroll.scrollTop + this.refs.iScroll.clientHeight >= this.refs.iScroll.scrollHeight -100){\n                this.loadMoreBooks();\n            }\n        });\n    }\n\n    loadBooks = (e) => {\n        e.preventDefault();\n\n        const {searchWord, per, page} = this.state;\n        fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchWord}&maxResults=${per}&startIndex=${page}`)\n            .then(data => data.json())\n            .then(data => {\n                console.log(data);\n                this.setState({\n                    books: [...data.items]\n                })\n            })\n    }\n\n    loadMoreBooks = () =>{\n        this.setState({\n            loadingState: true\n        });\n        setTimeout(() => {\n            this.setState({\n                page: this.state.page + 6,\n                loadingState: false\n            });\n            const {books, searchWord, per, page} = this.state;\n            fetch(`https://www.googleapis.com/books/v1/volumes?q=${searchWord}&maxResults=${per}&startIndex=${page}`)\n                .then(data => data.json())\n                .then(data => {\n                    console.log(data);\n                    this.setState({\n                        books: [...books, ...data.items]\n                    })\n                })\n        }, 1000);\n    }\n\n    handleChange =(e) =>{\n        this.setState({\n            searchWord: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"vc\"\n                     ref=\"iScroll\"\n                     style={{ height: \"100vh\", overflow: \"auto\" }}\n                >\n                    <Nav/>\n                    <SearchArea loadBooks={this.loadBooks} handleChange={this.handleChange}/>\n                    <BookList books={this.state.books}/>\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}